OR
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity OR_Gate is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           Y : out STD_LOGIC);
end OR_Gate;

architecture Behavioral of OR_Gate is
begin
    Y <= A or B;
end Behavioral;

AND
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity AND_Gate is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           Y : out STD_LOGIC);
end AND_Gate;

architecture Behavioral of AND_Gate is
begin
    Y <= A and B;
end Behavioral;

NOT
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity NOT_Gate is
    Port ( A : in STD_LOGIC;
           Y : out STD_LOGIC);
end NOT_Gate;

architecture Behavioral of NOT_Gate is
begin
    Y <= not A;
end Behavioral;

NOR
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity NOR_Gate is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           Y : out STD_LOGIC);
end NOR_Gate;

architecture Behavioral of NOR_Gate is
begin
    Y <= not (A or B);
end Behavioral;

NAND
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity NAND_Gate is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           Y : out STD_LOGIC);
end NAND_Gate;

architecture Behavioral of NAND_Gate is
begin
    Y <= not (A and B);
end Behavioral;

XOR
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity XOR_Gate is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           Y : out STD_LOGIC);
end XOR_Gate;

architecture Behavioral of XOR_Gate is
begin
    Y <= A xor B;
end Behavioral;

XNOR
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity XNOR_Gate is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           Y : out STD_LOGIC);
end XNOR_Gate;

architecture Behavioral of XNOR_Gate is
begin
    Y <= not (A xor B);
end Behavioral;